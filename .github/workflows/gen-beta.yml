name: Generate Beta Manifest

on:
  workflow_dispatch:
    inputs:
      tag_name:
        type: string
        description: "Which tag are you using? (ex: v1.0.0+0)"
        required: true
  workflow_call:
    inputs:
      tag_name:
        type: string
        description: "Which tag are you using? (ex: v1.0.0+0)"
        required: true

jobs:
  get_version:
    name: Get version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version_step.outputs.version }}
      release: ${{ steps.version_step.outputs.release }}
    steps:
      - name: Set version
        id: version_step
        run: |
          RELEASE=$(echo "$TAG_NAME" | sed -e "s/v//")
          echo "release: $RELEASE"

          VERSION=$(echo "$TAG_NAME" | sed -e "s/v//" -e "s/+/./")
          echo "version: $VERSION"

          echo "release=$RELEASE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          TAG_NAME: ${{ inputs.tag_name }}

  generate:
    runs-on: ubuntu-22.04
    needs: get_version
    steps:
      - uses: actions/checkout@v4

      - name: Install msitools
        run: |
          if ! command -v msiinfo >/dev/null 2>&1; then
            echo "msitools not exists"
            sudo apt-get update
            sudo apt-get install msitools
          fi
          msiinfo --version

      - name: Get SHA256
        id: sha256
        run: |
          curl -H "Authorization: Bearer ${{ secrets.PG_RELEASE_TOKEN }}" -fOL https://github.com/picguard/picguard/releases/download/v${{ needs.get_version.outputs.release }}.pre/picguard_${{ needs.get_version.outputs.release }}.pre_windows_x64_en-US.msi
          curl -H "Authorization: Bearer ${{ secrets.PG_RELEASE_TOKEN }}" -fOL https://github.com/picguard/picguard/releases/download/v${{ needs.get_version.outputs.release }}.pre/picguard_${{ needs.get_version.outputs.release }}.pre_windows_x64_zh-CN.msi

          echo "ensha256=$(sha256sum picguard_${{ needs.get_version.outputs.release }}_windows_x64_en-US.msi | cut -c 1-64 | tr '[:lower:]' '[:upper:]')" >> $GITHUB_OUTPUT
          echo "zhsha256=$(sha256sum picguard_${{ needs.get_version.outputs.release }}_windows_x64_zh-CN.msi | cut -c 1-64 | tr '[:lower:]' '[:upper:]')" >> $GITHUB_OUTPUT

          # msiinfo export picguard_1.0.1+405_windows_x64_en-US.msi Property | sed -n 's/^ProductCode\s\+//p'
          echo "enproductcode=$(msiinfo export picguard_${{ needs.get_version.outputs.release }}.pre_windows_x64_en-US.msi Property | sed -n 's/^ProductCode\s\+//p' | cut -c 1-38)" >> $GITHUB_OUTPUT
          echo "zhproductcode=$(msiinfo export picguard_${{ needs.get_version.outputs.release }}.pre_windows_x64_zh-CN.msi Property | sed -n 's/^ProductCode\s\+//p' | cut -c 1-38)" >> $GITHUB_OUTPUT

      - name: Get ReleaseDate
        id: date
        run: |
          echo "releasedate=$( \
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              https://api.github.com/repos/picguard/picguard/releases/tags/v${{ inputs.tag_name }}.pre \
            | jq -r '.published_at' \
            | cut -c 1-10 \
          )" >> $GITHUB_OUTPUT

      - name: Replace
        run: |
          sed -i 's/${version}/${{ needs.get_version.outputs.version }}/g' ./beta/Insco.PicGuard.Beta.installer.yaml
          sed -i 's/${release}/${{ needs.get_version.outputs.release }}/g' ./beta/Insco.PicGuard.Beta.installer.yaml
          sed -i 's/${releasedate}/${{ steps.date.outputs.releasedate }}/' ./beta/Insco.PicGuard.Beta.installer.yaml
          sed -i 's/${ensha256}/${{ steps.sha256.outputs.ensha256 }}/' ./beta/Insco.PicGuard.Beta.installer.yaml
          sed -i 's/${zhsha256}/${{ steps.sha256.outputs.zhsha256 }}/' ./beta/Insco.PicGuard.Beta.installer.yaml
          sed -i "s/'\${enproductcode}'/'${{ steps.sha256.outputs.enproductcode }}'/g" ./beta/Insco.PicGuard.Beta.installer.yaml
          sed -i "s/'\${zhproductcode}'/'${{ steps.sha256.outputs.zhproductcode }}'/g" ./beta/Insco.PicGuard.Beta.installer.yaml
          
          sed -i 's/${version}/${{ needs.get_version.outputs.version }}/' ./beta/Insco.PicGuard.Beta.locale.en-US.yaml
          sed -i 's/${release}/${{ needs.get_version.outputs.release }}/' ./beta/Insco.PicGuard.Beta.locale.en-US.yaml
          
          sed -i 's/${version}/${{ needs.get_version.outputs.version }}/' ./beta/Insco.PicGuard.Beta.locale.zh-CN.yaml
          sed -i 's/${release}/${{ needs.get_version.outputs.release }}/' ./beta/Insco.PicGuard.Beta.locale.zh-CN.yaml
          
          sed -i 's/${version}/${{ needs.get_version.outputs.version }}/' ./beta/Insco.PicGuard.Beta.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ inputs.tag_name }}.pre
          path: |
            ./beta/Insco.PicGuard.Beta.installer.yaml
            ./beta/Insco.PicGuard.Beta.locale.*.yaml
            ./beta/Insco.PicGuard.Beta.yaml
